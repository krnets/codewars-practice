# 7kyu - Sum Even Fibonacci Numbers

"""Write a func named SumEvenFibonacci that takes a parameter of type int and returns a value of type int

Generate all of the Fibonacci numbers starting with 1 and 2 and ending on the highest number 
before exceeding the parameter's value

Each new number in the Fibonacci sequence is generated by adding the previous two numbers - 
by starting with 1 and 2(the input could be smaller), the first 10 numbers will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    Sum all of the even numbers you generate and return that int

Example:

sumEvenFibonacci(8) // returns 10 by adding the even values 2 and 8 """


# def fibonacci(n):
#     nums = [0, 1]
#     x = len(nums)
#     for i in range(n - x):
#         nums.append(sum(nums[-x:]))
#         if nums[-1] > n:
#             return nums

# def SumEvenFibonacci(limit):
#     res = fibonacci(limit+5) or [0]
#     return sum(filter(lambda x: x <= limit and x % 2 == 0, res))


# from functools import lru_cache
# from itertools import takewhile, count

# even_fib = lru_cache(maxsize=None)(lambda n: 2 if n ==
#    0 else 8 if n == 1 else 4*even_fib(n-1) + even_fib(n-2))

# def SumEvenFibonacci(limit):
#     return sum(takewhile(limit.__ge__, map(even_fib, count())))

def SumEvenFibonacci(limit):
    a, b, total = 1, 1, 0
    while a <= limit:
        if a % 2 == 0:
            total += a
        a, b = b, a+b
    return total


q = SumEvenFibonacci(1), 0
q
q = SumEvenFibonacci(2), 2
q
q = SumEvenFibonacci(8), 10
q
q = SumEvenFibonacci(111111), 60696
q
